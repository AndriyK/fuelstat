{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/NewTransaportPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginLeft","spacing","title","HomePage","classes","React","useState","anchorEl","setAnchorEl","handleClose","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","color","aria-label","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","component","Link","to","NewTransportPage","App","exact","path","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,0LCYrCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,WAAYJ,EAAMK,QAAQ,IAE5BC,MAAO,CACLJ,SAAU,MA6CCK,MAzCf,WACE,IAAMC,EAAUV,IADE,EAEcW,IAAMC,SAAS,MAF7B,mBAEXC,EAFW,KAEDC,EAFC,KAQlB,SAASC,IACPD,EAAY,MAGd,OACE,yBAAKE,UAAWN,EAAQP,MACpB,kBAACc,EAAA,EAAD,CAAQC,SAAS,UACnB,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWN,EAAQF,OAA5C,eACA,kBAACc,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAAOC,QAbhE,SAAqBC,GACnBb,EAAYa,EAAMC,gBAYkEZ,UAAWN,EAAQL,YAC7F,kBAAC,IAAD,OAEL,kBAACwB,EAAA,EAAD,CACEC,GAAG,cACHjB,SAAUA,EACVkB,aAAW,EACXC,KAAMC,QAAQpB,GACdqB,QAASnB,GAET,kBAACoB,EAAA,EAAD,CAAUT,QAASX,EAAcqB,UAAWC,IAAMC,GAAG,kBAArD,mBAIA,kBAACH,EAAA,EAAD,CAAUT,QAASX,GAAnB,UACA,kBAACoB,EAAA,EAAD,CAAUT,QAASX,GAAnB,UACA,kBAACoB,EAAA,EAAD,CAAUT,QAASX,GAAnB,iBC5CIwB,MAVf,WACE,OACE,yDAEC,6BACA,kBAAC,IAAD,CAAMD,GAAG,KAAT,oBCQUE,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIN,UAAW3B,IACjC,kBAAC,IAAD,CAAOiC,KAAK,iBAAiBN,UAAWG,MCC1BN,QACW,cAA7BU,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5ea117a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction HomePage() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  return (\n    <div className={classes.root}>\n       \t<AppBar position=\"static\">\n    \t\t<Toolbar>\n    \t\t\t<Typography variant=\"h6\" className={classes.title}>My vehicles</Typography>\n\t\t    \t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleClick} className={classes.menuButton} >\n\t            \t<MoreVertIcon />\n\t            </IconButton>\n\t\t      \t<Menu\n\t\t\t        id=\"simple-menu\"\n\t\t\t        anchorEl={anchorEl}\n\t\t\t        keepMounted\n\t\t\t        open={Boolean(anchorEl)}\n\t\t\t        onClose={handleClose}\n\t\t\t      >\n\t\t\t        <MenuItem onClick={handleClose}  component={Link} to=\"/new-transport\">\n\t\t\t        \tAdd new vehicle\n\t\t\t        \t\n\t\t\t        </MenuItem>\n\t\t\t        <MenuItem onClick={handleClose}>Import</MenuItem>\n\t\t\t        <MenuItem onClick={handleClose}>Export</MenuItem>\n\t\t\t        <MenuItem onClick={handleClose}>Settings</MenuItem>\n\t\t        </Menu>\n\t        </Toolbar>\n    \t</AppBar>\n    </div>\n  );\n}\n\nexport default HomePage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NewTransportPage() {\n  return (\n    <div>\n    \tIt is new transaport page\n    \t<br />\n    \t<Link to=\"/\">Return to Home</Link>\n    </div>\n  );\n}\n\nexport default NewTransportPage;","import React from 'react';\nimport logo from './logo.svg';\n//import './Appcss';\nimport { Route, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport NewTransportPage from './pages/NewTransaportPage';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/new-transport\" component={NewTransportPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}