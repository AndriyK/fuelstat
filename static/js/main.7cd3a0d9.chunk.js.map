{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/NewTransaportPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","href","role","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","to","NewTransportPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gICsB5BC,MAnBf,WACE,OACC,yBAAKC,UAAU,iCACf,0BAAMA,UAAU,gBAAhB,eACA,yBAAKA,UAAU,YACd,uBAAGA,UAAU,MAAMC,KAAK,IAAIC,KAAK,SAASC,GAAG,mBAAmBC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SACxH,uBAAGN,UAAU,kBAAb,cAEJ,yBAAKA,UAAU,oCAAoCO,kBAAgB,sBAClE,kBAAC,IAAD,CAAMP,UAAU,gBAAgBQ,GAAG,kBAAnC,mBACA,kBAAC,IAAD,CAAMR,UAAU,gBAAgBQ,GAAG,KAAnC,UACA,kBAAC,IAAD,CAAMR,UAAU,gBAAgBQ,GAAG,KAAnC,UACA,kBAAC,IAAD,CAAMR,UAAU,gBAAgBQ,GAAG,KAAnC,gBCFYC,MAVf,WAEE,OACE,6BACC,kBAAC,IAAD,CAAMD,GAAG,KAAT,oBCaUE,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,iBAAiBC,UAAWJ,MCH1BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7cd3a0d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction HomePage() {\n  return (\n  \t<nav className=\"navbar navbar-dark bg-primary\">\n\t  <span className=\"navbar-brand\">My vehicles</span>\n\t  <div className=\"dropdown\">\n\t  \t<a className=\"btn\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n    \t\t<i className=\"material-icons\">more_vert</i>\n  \t\t</a>\n\t\t<div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\n\t\t\t<Link className=\"dropdown-item\" to=\"/new-transport\">Add new vehicle</Link>\n\t\t\t<Link className=\"dropdown-item\" to=\"/\">Import</Link>\n\t\t\t<Link className=\"dropdown-item\" to=\"/\">Export</Link>\n\t\t\t<Link className=\"dropdown-item\" to=\"/\">Settings</Link>\n\t\t</div>\n      </div>\n\t</nav>\n  );\n}\n\nexport default HomePage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NewTransportPage() {\n\n  return (\n    <div>\n\t   \t<Link to=\"/\">Return to Home</Link>\n    </div>\n\n  );\n}\n\nexport default NewTransportPage;","import \"bootswatch/dist/materia/bootstrap.min.css\";\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport logo from './logo.svg';\n//import './Appcss';\nimport { Route, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport NewTransportPage from './pages/NewTransaportPage';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/new-transport\" component={NewTransportPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}